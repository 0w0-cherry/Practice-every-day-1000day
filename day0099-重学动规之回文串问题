//分割回文串IV
https://leetcode.cn/problems/palindrome-partitioning-iv/
class Solution {
public:
    bool checkPartitioning(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n,0));
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]=i+1<j?dp[i+1][j-1]:true;
                }
            }
        }
        for(int i=1;i<=n-2;i++)
        {
            for(int j=i;j<=n-2;j++)
            {
                if(dp[0][i-1]&&dp[i][j]&&dp[j+1][n-1])
                return true;
            }
        }
        return false;
    }
};

//分割回文串II
https://leetcode.cn/problems/omKAoA/
class Solution {
public:
    int minCut(string s) {
        int n=s.size();
        vector<vector<bool>> is_pal(n,vector<bool>(n));
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    is_pal[i][j]=i+1<j?is_pal[i+1][j-1]:true;
                }
            }
        }

        vector<int> dp(n,INT_MAX);
        for(int i=0;i<n;i++)
        {
            if(is_pal[0][i]) dp[i]=0;
            else
            {
                for(int j=1;j<=i;j++)
                {
                    if(is_pal[j][i]) 
                    {
                        dp[i]=min(dp[j-1]+1,dp[i]);
                    }
                }
            }
        }
        return dp[n-1];
    }
};

//最长回文子序列
https://leetcode.cn/problems/longest-palindromic-subsequence/
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n));\

        for(int i=n-1;i>=0;i--)
        {
            dp[i][i]=1;
            for(int j=i+1;j<n;j++)
            {
                if(s[i]==s[j]) dp[i][j]=dp[i+1][j-1]+2;
                else dp[i][j]=max(dp[i][j-1],dp[i+1][j]);
            }
        }
        return dp[0][n-1];
    }
};


//让字符串成为回⽂串的最⼩插⼊次数
https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/
class Solution {
public:
    int minInsertions(string s) {
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n));

        for(int i=n-1;i>=0;i--)
        {
            dp[i][i]=0;
            for(int j=i+1;j<n;j++)
            {
                if(s[i]==s[j]) dp[i][j]=dp[i+1][j-1];
                else
                {
                    dp[i][j]=min(dp[i+1][j],dp[i][j-1])+1;
                }
            }
        }
        return dp[0][n-1];
    }
};
