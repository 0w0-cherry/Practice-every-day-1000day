https://leetcode.cn/problems/n-th-tribonacci-number/
class Solution {
public:
    int tribonacci(int n) {

        vector<int> a(n+3);//优化部分，避免开头需要额外判断n<3的部分
        a[0]=0;
        a[1]=1;
        a[2]=1;
        for(int i=3;i<=n;i++)
        {
            a[i]=a[i-1]+a[i-2]+a[i-3];
        }
        return a[n];
    }
};

https://leetcode.cn/problems/rotate-array/
class Solution {
public:
    void reverse(vector<int>& nums, int start, int end) {
        while (start < end) {
            swap(nums[start], nums[end]);
            start += 1;
            end -= 1;
        }
    }

    void rotate(vector<int>& nums, int k) {
        k %= nums.size();
        int mid=nums.size()-1-k;
        reverse(nums, 0,mid );
        reverse(nums, mid+1, nums.size() - 1);
        reverse(nums, 0, nums.size() - 1);

    }
};


https://leetcode.cn/problems/three-steps-problem-lcci/
class Solution {
public:
    int waysToStep(int n) {
        vector<int> a(n+3+1);//n级台阶
        a[1]=1;
        a[2]=a[1]+1;
        a[3]=a[1]+a[2]+1;
        for(int i=4;i<=n;i++)
        {
            a[i]=( (a[i-1]+a[i-2])%1000000007+a[i-3])%1000000007;
        }
        return a[n];
    }
};






