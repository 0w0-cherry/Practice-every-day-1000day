//回文子串
https://leetcode.cn/problems/a7VOhD/
class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        int ret=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                dp[i][j]=i+1<j?dp[i+1][j-1]:true;
                if(dp[i][j])
                ret++;
            }
        }
        return ret;
    }
};


//最长回文子串
https://leetcode.cn/problems/longest-palindromic-substring/
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        int len=1;
        int begin=0;
        vector<vector<bool>> dp(n,vector<bool>(n));
        for(int i=n-1;i>=1;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]=i+1<j?dp[i+1][j-1]:true;
                }
                if(dp[i][j]&& j-i+1>len)
                {
                    len=j-i+1;
                    begin=i;
                }
            }
        }
        return s.substr(begin,len);
    }
};
