https://leetcode.cn/problems/longest-palindromic-subsequence/
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n));

        for(int i=n-1;i>=0;i--)
        {
            dp[i][i]=1;
            for(int j=i+1;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]=dp[i+1][j-1]+2;
                }
                else
                {
                    dp[i][j]=max(dp[i][j-1],dp[i+1][j]);
                }
            }

        }
        return dp[0][n-1];
    }
};


https://leetcode.cn/problems/palindrome-partitioning-iv/
class Solution {
public:
    bool checkPartitioning(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));

        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]= i+1<j?dp[i+1][j-1]:true;
                }
            }
        }

        for(int i=1;i<n-1;i++)
        {
            for(int j=i;j<n-1;j++)
            {
                if(dp[0][i-1] && dp[i][j] && dp[j+1][n-1])
                return true;
            }
        }
        return false;
    }
};


https://leetcode.cn/problems/a7VOhD/
class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        int ret=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]= i+1<j?dp[i+1][j-1] : true;
                    if(dp[i][j])
                    {
                        ret++;
                    }
                }
            }
        }
        return ret;
    }
};




https://leetcode.cn/problems/longest-palindromic-substring/
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));

        int len=1,pos=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]= i+1<j? dp[i+1][j-1] : true;
                    if(dp[i][j] && len<j-i+1)
                    {
                        len=j-i+1;
                        pos=i;
                    }
                }
            }
        }
        return s.substr(pos,len);
    }
};



https://leetcode.cn/problems/omKAoA/
class Solution {
public:
    int minCut(string s) {
        int n=s.size();
        vector<vector<bool>> isPal(n,vector<bool>(n));
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    isPal[i][j]= i+1<j? isPal[i+1][j-1]:true;
                }
            }
        }

        vector<int> dp(n,INT_MAX);
        for(int i=0;i<n;i++)
        {
            if(isPal[0][i]) dp[i]=0;
            else
            {
                for(int j=1;j<=i;j++)
                {
                    if(isPal[j][i])
                    {
                        dp[i]=min(dp[i],dp[j-1]+1);
                    }
                }
            }
        }
        return dp[n-1];
    }
};
