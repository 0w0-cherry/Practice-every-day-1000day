//仿函数
#include<bits/stdc++.h>
using namespace std;

int cmp(pair<int, double> a, pair<int, double> b)
{
	return a.first > b.first;
}
int main1()
{
	vector<pair<int, double>> vec;
	vec.push_back(make_pair(3, 3.14));
	vec.push_back(make_pair(5, 2.14));
	vec.push_back(make_pair(7, 1.14));
	vec.push_back(make_pair(9, 0.14));

	sort(vec.begin(), vec.end(),cmp);//仿函数的逻辑，返回true不交换,返回false交换
	for (int i = 0; i < 4; i++)
	{
		cout << vec[i].first<<endl;
	}
	return 0;
}


https://leetcode.cn/problems/word-break/
//单词拆分
//难度：中等
class Solution {
public:
    bool wordBreak(string s, vector<string>& w) {
        set<string> dictionaries ;
        for(auto e:w)
        {
            dictionaries.insert(e);
        }

        int n=s.size();
        s=' '+s;
        vector<bool> dp(n+1);
        dp[0]=true;
        for(int i=1;i<=n;i++)
        {
            //需要拼出的单词为j-i
            for(int j=i;j>=1;j--)//最后一个单词的起始位置
            {
                if(dp[j-1]==1 && dictionaries.count(s.substr(j,i-j+1)))
                {
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[n];
    }
};
