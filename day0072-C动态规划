https://leetcode.cn/problems/palindrome-partitioning-iv/
//分割回文串
//难度：困难
class Solution {
public:
    bool checkPartitioning(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]=j-i<=1?true:dp[i+1][j-1];
                }
            }
        }
        for(int i=1;i<=n-2;i++)
        {
            for(int j=i;j<=n-2;j++)
            {
                if(dp[0][i-1] && dp[i][j] && dp[j+1][n-1])
                return true;
            }
        }
        return false;
    }
};

https://leetcode.cn/problems/longest-palindrome/description/
//最长回文串
//难度：简单
class Solution {
public:
    int longestPalindrome(string s) {
        map<char,int> hash;
        for(int i=0;i<s.size();i++)
        {
            hash[s[i]]++;
        }
        int ret=0;
        for(int i=0;i<hash.size();i++)
        {
            ret+= hash[i]/2*2;//ret必为偶数
        }
        if(ret<s.size())
        {
            ret++;
        }
        return ret;
    }
};

https://leetcode.cn/problems/a7VOhD/
//回文子串
//难度：中等
class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        int ret=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<=n-1;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]= j-i<=1?true:dp[i+1][j-1];
                }
                if(dp[i][j])
                {
                    ret++;
                }
            }
        }
        return ret;
    }
};

https://leetcode.cn/problems/longest-palindromic-substring/
//最长回文子串
//难度：中等
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        int len=1;
        int begin=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j]= j-i<=1? true: dp[i+1][j-1];
                }
                if(dp[i][j] && len<j-i+1)
                {
                    len=j-i+1;
                    begin=i;
                }
            }
        }
        return s.substr(begin,len);
    }
};

