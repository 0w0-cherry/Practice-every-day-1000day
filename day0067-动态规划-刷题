https://leetcode.cn/problems/unique-substrings-in-wraparound-string/
环绕字符串中的唯一子字符串
//难度：中等
思路：
（1）dp[i]表示以当前位置为结尾，有多少种不同子串
（2）每次均已当前位置为结尾，若满足条件，则继承dp[i-1]，并+1（相当于连续字符串继续连续，并又拼接1个字符）
class Solution {
public:
    int findSubstringInWraproundString(string s) {
        int n=s.size();
        vector<int> dp(n,1);
        for(int i=1;i<n;i++)
        {
            if(s[i-1]+1==s[i] || s[i-1]=='z'&&s[i]=='a')
            {
                dp[i]=dp[i-1]+1;
            }
        }
        //去重
        //这是为了避免dp[i]可能存在多个以某个字符为结尾的值，如{a,c,a}，dp[0]与dp[2]重复
        int hash[26]={0};
        for(int i=0;i<n;i++)
        {
            //s[i]表示当前字符，dp[i]表示以当前字符为结尾有多少种不同子串
            //因此dp[s[i]-'a']表示：在算上偏移量的情况下，以当前字符为结尾有多少种不同子串
            hash[s[i]-'a']=max(hash[s[i]-'a'],dp[i]);
        }
        int ret=0;
        for(auto e:hash)
        {
            ret+=e;
        }
        return ret;
    }
};



//仿函数
#include<bits/stdc++.h>
using namespace std;

int cmp(pair<int, double> a, pair<int, double> b)
{
	return a.first > b.first;
}
int main1()
{
	vector<pair<int, double>> vec;
	vec.push_back(make_pair(3, 3.14));
	vec.push_back(make_pair(5, 2.14));
	vec.push_back(make_pair(7, 1.14));
	vec.push_back(make_pair(9, 0.14));

	sort(vec.begin(), vec.end(),cmp);//仿函数的逻辑，返回true不交换,返回false交换
	for (int i = 0; i < 4; i++)
	{
		cout << vec[i].first<<endl;
	}
	return 0;
}


https://leetcode.cn/problems/word-break/
//单词拆分
//难度：中等
class Solution {
public:
    bool wordBreak(string s, vector<string>& w) {
        set<string> dictionaries ;
        for(auto e:w)
        {
            dictionaries.insert(e);
        }

        int n=s.size();
        s=' '+s;
        vector<bool> dp(n+1);
        dp[0]=true;
        for(int i=1;i<=n;i++)
        {
            //需要拼出的单词为j-i
            for(int j=i;j>=1;j--)//最后一个单词的起始位置
            {
                if(dp[j-1]==1 && dictionaries.count(s.substr(j,i-j+1)))
                {
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[n];
    }
};

https://leetcode.cn/problems/longest-increasing-subsequence/
最长递增子序列
//难度：中等
思路：
dp[i]表示以当前位置为结尾，最长子序列的长度
以i位置为结尾，每次j都需要遍历0-(i-1)位置,来算出最长长度
情况1：以当前位置为结尾的子序列就是目前最长的子序列长度
情况2：在当前位置之前，有一个子序列长度超过当前记录的最长子序列长度，需要更新dp[i]
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        //初值为1
        vector<int> dp(n,1);//以当前位置为结尾，最长子序列长度
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)//以i位置为结尾，每次j都需要遍历0-(i-1)位置,
            {
                if(nums[j]<nums[i])
                {
                    dp[i]=max(dp[i],dp[j]+1);//满足情况则更新dp[i]
                }
            }
        }
        return dp[n-1];
    }
};




https://leetcode.cn/problems/wiggle-subsequence/
摆动序列
//难度：中等
思路：
dp[i]表示以当前位置为结尾，摆动序列的最长长度
f[i]存储上升状态，g[i]存储下降状态
情况1：从f[ j ]到f[ i ]为上升状态，f[i]可保持原先的长度 或 继承从f[j]转移的长度并+1
情况2：从g[ j ]到g[ i ]为下降状态，g[i]可保持原先的长度 或 继承从g[j]转移的长度并+1
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        vector<int> f(n,1);//存储上升状态
        auto g=f;//存储下降状态
        int ret=1;//需要单独考虑表中就1个元素
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])//上升
                {
                    f[i]=max(f[i],g[j]+1);//保持原先的长度 或 继承从g[j]转移的长度并+1
                }
                else if(nums[j]>nums[i])//下降
                {
                    g[i]=max(g[i],f[j]+1);g[i]可保持原先的长度 或 继承从f[j]转移的长度并+1
                }
            }
        }
        //最大连续长度必然在最后的位置存着
        //原因：只要有一次上升或者下降，都会将最后的位置更新
        //     若均为水平，则为初值1
        ret=max(f[n-1],g[n-1]);
        return ret;
    }
};
