#include<vector>
#include<bits/stdc++.h>

using namespace std;

//如果key不支持强转整型取模，那么就需要自己提供转换成整型的仿函数
template<class K>
struct HashFunc
{
	size_t operator()(const K& key)
	{
		return (size_t)key;
	}
};
//全特化
template<>
struct HashFunc<string>
{
	size_t operator()(const string& key)
	{
		size_t hash = 0;
		for (auto ch : key)
		{
			hash *= 131;
			hash += ch;
		}
		return hash;
	}
};



namespace open_address
{
	enum State
	{
		EMPTY,
		EXIST,
		DELATE
	};
	template<class K, class V>
	struct HashDate
	{
		pair<K, V> _kv;  //在std类域里面  你需要展开
		State _state;
	};
	struct StringHashFunc
	{
		size_t operator()(const string& key)
		{
			size_t hash = 0;
			for (auto ch : key)
			{
				hash *= 131;
				hash += ch;
			}
			return hash;
		}
	};


	template<class K, class V, class Hash = HashFunc<K>>//仿函数将字符转为数字
	class HashTable
	{
	public:
		HashTable()
		{
			_tables.resize(10);
		}
		bool Insert(const pair<K, V>& kv)
		{
			//扩容
			if (_n * 10 / _tables.size() >= 7)//直接插入数据时，若空间足够，不会扩容
			{
				//size_t newsize = _tables.size() * 2;
				//vector<HashTables<K, V>> newtables(newsize);
				//旧表重新计算负载到新表
				//for(size_t i=0;i<_tables.size();i++)
				//{ }
				HashTable<K, V> newHT;
				newHT._tables.resize(_tables.size() * 2);
				//旧表重新计算负载到新表
				for (size_t i = 0; i < _tables.size(); i++)
				{
					if (_tables[i]._state == EXIST)//若该值是存在的，则新表insert
					{
						newHT.Insert(_tables[i]._kv);
					}
				}
				_tables.swap(newHT._tables);
			}

			//定位
			Hash hs;
			size_t hashi = hs(kv.first) % _tables.size();
			while (_tables[hashi]._state == EXIST)
			{
				++hashi;
				hashi %= _tables.size();//避免超出表的范围
				//不能%capacity的原因：0-size位置的数据可访问，size-capacity的数据不可访问
			}

			_tables[hashi]._kv = kv;
			_tables[hashi]._state = EXIST;
			++_n;
			return true;
		}
		HashDate<K, V>* Find(const K& key)
		{
			Hash hs;
			size_t hashi = hs(key) % _tables.size();
			while (_tables[hashi]._state != EMPTY)
			{
				if (_tables[hashi]._kv.first == key &&
					_tables[hashi]._state == EXIST)
					return &_tables[hashi];
				++hashi;
				hashi %= _tables.size();
			}
			return nullptr;
		}
		bool Erase(const K& key)
		{
			HashDate<K, V>* ret = Find(key);
			if (ret == nullptr)
				return false;
			else
			{
				ret->_state = DELATE;//删除仅把状态改变
				--_n;
				return true;
			}
		}
	private:
		vector<HashDate<K, V>> _tables;
		size_t _n;//映射了位置的数据的个数
	};  //这里没有;号

	void TestHT1()
	{
		int a[] = { 10001,11,55,24,19,12,31 };
		HashTable<int, int> ht;
		for (auto e : a)
		{
			ht.Insert(make_pair(e, e));
		}

		cout << ht.Find(55) << endl;
		cout << ht.Find(31) << endl;

		ht.Erase(55);
		cout << ht.Find(55) << endl;
		cout << ht.Find(31) << endl;
	}
	void TestHT2()
	{
		int a[] = { 10001,11,55,24,19,12,31 };
		HashTable<int, int> ht;
		for (auto e : a)
		{
			ht.Insert(make_pair(e, e));
		}

		ht.Insert(make_pair(32, 32));
		ht.Insert(make_pair(32, 32));
	}
}


namespace hash_bucket
{
	template<class K, class V>
	struct HashNode
	{
		pair<K, V> _kv;
		HashNode<K, V>* _next;
	};

	template<class K, class V>
	class HashTable
	{
		typedef HashNode<K, V> Node;
	public:
		HashTable()
		{
			_tables.resize(10, nullptr);
			_n = 0;
		}

		bool Insert(const pair<K, V>& kv)
		{
			//哈希桶仍需要扩容
			if (_n == _table)
			{
				;
			}



			size_t hashi = kv.first % _tables.size();
			Node* newnode = new Node(kv);
			//头插O(1),尾插O(N), 所以选择头插
			newnode->_next = _tables[hashi];
			_tables[hashi] = newnode;
			++_n;

			return true;
		}

		Node* Find(const K& key)
		{
			size_t hashi = key % _tables.size();
			Node* cur = _tables[hashi];
			while (cur)
			{
				if (cur->_kv.first == key)
				{
					return cur;
				}
				cur = cur->_next;
			}
			return nullptr;
		}

	private:
		vector<Node*> _tables; // 指针数组
		size_t _n;

		//vector<list<pair<K, V>>> _tables;
	};
}
/*--------------------------------------------------------------------*/
#include"HashTable.h"


int main()
{
	open_address::TestHT1();
	//TestHT2();
	return 0;
}

