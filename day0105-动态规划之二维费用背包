//一和零
https://leetcode.cn/problems/ones-and-zeroes/
方法：
状态转移方程分为：选这个位置 和 不选这个位置
不选：dp[i-1][j][k]
选：继承状态 dp[i-1][j-zero][k-one]
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int x=strs.size();
        vector<vector<vector<int>>> dp(x+1,vector<vector<int>>(m+1,vector<int>(n+1)));
        //dp[i][j][k]表示从前i个字符串中选，0的数量不超过j个，1的数量不超过k个
        for(int i=1;i<=x;i++)
        {
            int zero=0,one=0;
            for(int q=0;q<strs[i-1].size();q++)
            {
                if(strs[i-1][q]=='0') zero++;
                else if(strs[i-1][q]=='1') one++;
            }
            for(int j=0;j<=m;j++)
            {
                for(int k=0;k<=n;k++)
                {
                    dp[i][j][k]=dp[i-1][j][k];
                    if(j>=zero&&k>=one)
                    {
                        dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-zero][k-one]+1);
                    }
                }
            }
        }
        return dp[x][m][n];
    }
};
空间优化
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int x=strs.size();
        vector<vector<int>> dp(m+1,vector<int>(n+1));
        for(int i=1;i<=x;i++)
        {
            int zero=0,one=0;
            for(auto ch:strs[i-1])
            {
                if(ch=='0') zero++;
                else one++;
            }
            for(int j=m;j>=zero;j--)
            {
                for(int k=n;k>=one;k--)
                {
                    dp[j][k]=max(dp[j][k],dp[j-zero][k-one]+1);
                }
            }
        }
        return dp[m][n];
    }
};

//盈利计划
https://leetcode.cn/problems/profitable-schemes/
class Solution {
public:
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        int x=group.size();
        vector<vector<vector<int>>> dp(x+1,vector<vector<int>>(n+1,vector<int>(minProfit+1)));
        //dp[i][j][k]表示从前i种工作中选，人数不超过j，利润至少为k的方法总数
        for(int j=0;j<=n;j++) dp[0][j][0]=1;
        for(int i=1;i<=x;i++)
        {
            for(int j=0;j<=n;j++)
            {
                for(int k=0;k<=minProfit;k++)
                {
                    dp[i][j][k]=dp[i-1][j][k];
                    if(j-group[i-1]>=0)
                    {
                        dp[i][j][k]+=dp[i-1][j-group[i-1]][max(0,k-profit[i-1])];
                    }
                    dp[i][j][k]%=1000000007;
                }
            }
        }
        return dp[x][n][minProfit];
    }
};
空间优化
class Solution {
public:
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        int x=group.size();
        vector<vector<int>> dp(n+1,vector<int>(minProfit+1));
        //dp[i][j][k]表示从前i种工作中选，人数不超过j，利润至少为k的方法总数
        for(int j=0;j<=n;j++) dp[j][0]=1;
        for(int i=1;i<=x;i++)
        {
            for(int j=n;j>=group[i-1];j--)
            {
                for(int k=minProfit;k>=0;k--)
                {
                    dp[j][k]+=dp[j-group[i-1]][max(0,k-profit[i-1])];
                    dp[j][k]%=1000000007;
                }
            }
        }
        return dp[n][minProfit];
    }
};
