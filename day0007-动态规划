https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/
#include <vector>
#include <algorithm>

class Solution {
public:
    int maxProfit(std::vector<int>& prices) {
        int n = prices.size();
        if (n == 0) return 0; // Edge case: empty prices list

        std::vector<int> f(n); // 持有股票的最大利润
        std::vector<int> g(n); // 不持有股票的最大利润

        f[0] = -prices[0]; // 第一天持有股票
        g[0] = 0;          // 第一天不持有股票

        for (int i = 1; i < n; ++i) {
            f[i] = std::max(f[i - 1], - prices[i]);//只买一次股票
            g[i] = std::max(g[i - 1], f[i - 1] + prices[i]);
        }

        return g[n - 1];     }
};

https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> f(n);
        auto g=f;
        f[0]=-prices[0];
        g[0]=0;
        for(int i=1;i<n;i++)
        {
            f[i]=max(f[i-1],g[i-1]-prices[i]);
            g[i]=max(g[i-1],f[i-1]+prices[i]);
        }
        return g[n-1];
    }
};


https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/
class Solution {
public:
const int INF=0x3f3f3f3f;
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> f(n,vector<int> (3,-INF));
        auto g=f;
        f[0][0]=-prices[0];
        g[0][0]=0;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<3;j++)
            {
                f[i][j]=max(f[i-1][j],g[i-1][j]-prices[i]);
                g[i][j]=g[i-1][j];
                if(j-1>=0)
                {
                    g[i][j]=max(g[i][j],f[i-1][j-1]+prices[i]);
                }
            }
        }
        return max(max(g[n-1][0],g[n-1][1]),g[n-1][2]);
    }
};



https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/
class Solution {
public:
const int INF = 0x3f3f3f3f;
    int maxProfit(int k, vector<int>& prices) {


        int n=prices.size();
        k=min(k,n/2);//
        vector<vector<int>> f(n,vector<int>(k+1,-INF));//交易次数为k次
        auto g=f;
        f[0][0]=-prices[0];
        g[0][0]=0;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=k;j++)
            {
                f[i][j]=max(f[i-1][j],g[i-1][j]-prices[i]);
                g[i][j]=g[i-1][j];
                if(j>=1)
                {
                    g[i][j]=max(g[i][j],f[i-1][j-1]+prices[i]);
                }
            }
        }
        int ret=0;
        for(int j=0;j<=k;j++)//交易0次-交易k次
        {
            ret=max(ret,g[n-1][j]);
        }
        return ret;
    }
};



https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        vector<int> f(n);
        auto g=f;

        f[0]=-prices[0];
        g[0]=0;
        for(int i=1;i<n;i++)
        {
            f[i]=max(f[i-1],g[i-1]-prices[i]);
            g[i]=max(g[i-1],f[i-1]+prices[i]-fee);
        }
        return g[n-1];
    }
};


https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(3));
        dp[0][0]=-prices[0];
        for(int i=1;i<n;i++)
        {
            dp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i]);
            dp[i][1]=max(dp[i-1][1],dp[i-1][2]);
            dp[i][2]=max(dp[i-1][2],dp[i-1][0]+prices[i]);
        }
        return max(dp[n-1][1],dp[n-1][2]);
    }
};
https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/
class Solution {
public:
    int bestTiming(vector<int>& prices) {
        int n=prices.size();
        if(n==0)
        return 0;
        vector<int> f(n);
        auto g=f;
        f[0]=-prices[0];
        for(int i=1;i<n;i++)
        {
            f[i]=max(f[i-1],-prices[i]);
            g[i]=max(g[i-1],f[i-1]+prices[i]);
        }
        return g[n-1];
    }
};
