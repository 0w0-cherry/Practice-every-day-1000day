https://leetcode.cn/problems/decode-ways/solutions/734344/jie-ma-fang-fa-by-leetcode-solution-p8np/
题目：解码方法
1.方法一：使用虚拟位置
class Solution {
public:
    int numDecodings(string s) {
        int n =s.size();
        vector<int> dp(n+1);
        dp[0]=1;

        dp[1]=s[0]=='0'?0:1;
        for(int i=2;i<=n;i++)
        {
            if(s[i-1]!='0')
            dp[i]+=dp[i-1];
            int sum=(s[i-2]-'0')*10+(s[i-1]-'0');
            if(sum<=26 && sum>=10)
            dp[i]+=dp[i-2];
        }
        return dp[n];
    }
};
2.方法二：不使用虚拟位置
细节注意：
需要特判元素只有一个的情况
特判dp[1]的时候需要使用 ++或+1 ，因为此时的 i-2 == -1
class Solution {
public:
    int numDecodings(string s) {
        int n =s.size();
        vector<int> dp(n);
        dp[0]= s[0]=='0'?0:1;
        if(n==1)
        {
            return dp[0];
        }
        if(s[1]>'0')//当前单独位置能够解码
        {
        dp[1]+=dp[0];
        }
        int sum= (s[0]-'0')*10+(s[1]-'0');
        if(sum<=26 && sum>=10)
        dp[1]++;


        for(int i=2;i<n;i++)
        {
            if(s[i]>'0')
            dp[i]+=dp[i-1];

            sum=(s[i-1]-'0')*10+(s[i]-'0');
            if(sum>=10 && sum<=26)
            dp[i]+=dp[i-2];
        }
        return dp[n-1];
    }
};




https://leetcode.cn/problems/unique-paths/submissions/
题目：不同路径
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1));
        dp[0][1]=1;

        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};




https://leetcode.cn/problems/min-cost-climbing-stairs/
题目：使用最小方法爬楼梯
1.方法一：
以当前位置为结尾，dp[i]表示起点到当前位置的最小花费
通过dp前面的位置上的值（即从起点到前面位置的最小花费）计算出从起点到当前位置的最小花费
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        //dp表
        //初始化
        //填表
        //返回值
        
        //dp[i]表示到当前位置的最小花费
        int n=cost.size();
        vector<int> dp(n+1);
        dp[0]=dp[1]=0;
        for(int i=2;i<=n;i++)
        {
            dp[i]=min(dp[i-2]+cost[i-2],dp[i-1]+cost[i-1]);
        }
        return dp[n];
        
    }
};
2.方法二：
以当前位置为开始，dp[i]表示当前位置 i 到终点的最小消费
通过dp后面的位置上的值（即从后面的位置到终点的最小花费）计算出当前位置到终点的最小消费
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        //dp表
        //初始化
        //填表
        //返回值
        
        //方法二：以当前位置为开始，到楼顶的最小花费
        //dp[i]表示当前位置到楼顶的最低消费
        //
        int n=cost.size();
        vector<int> dp(n+1);
        dp[n]=0;
        dp[n-1]=cost[n-1];
        //dp[n-2]=cost[n-2];
        for(int i=n-2;i>=0;i--)
        {
            dp[i]=min(dp[i+1],dp[i+2])+cost[i];
        }
        return min(dp[1],dp[0]);
     }
};

