一.为什么会有指针？
在计算机中为了方便管理，内存会被划分以 字节 为单位的空间，而为了方便找到某个内存单元，就给每个内存单元一个编号。因此有了内存单元的编号，就能快速找到指针
（内存单元的编号==指针==地址）

二.指针变量的大小
#include<stdio.h>
//指针变量的大小取决于地址的大小
//32位平台下是32个bit位（4字节）
//64位平台下是64个bit位（8字节）

int main()
{
    printf("%zd\n",sizeof(char*));
    printf("%zd\n",sizeof(short*));
    printf("%zd\n",sizeof(int*));
    printf("%zd\n",sizeof(double*));
}
三.指针类型的意义
1.在同一平台下，指针类型不同时，虽然所占空间相同，但指针类型决定了在解引用操作时的权限，也就是一次解引用几个字节
2.指针类型决定了，指针进行+1/-1 操作时，一次跳过几个字节

四.野指针
概念：野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）
1.野指针成因
（1）指针未初始化
（2）指针越界访问
（3）指针指向的空间释放

2.如何避免野指针
（1）指针初始化
（2）小心指针越界
（3）指针变量不再使用时及时置为NULL,指针使用之前检查有效性
（4）避免返回局部变量的地址

五.数组名的理解
1.sizeof（数组名）：sizeof中单独放数组名，这里的数组名表示整个数组，计算的是整个数组的大小
2.&数组名：这里的数组名表示整个数组，取出的是整个数组的地址（整个数组的地址和数组首元素的地址是有区别的）
3.除1、2两种情况外，任何地方使用数组名，数组名都表示首元素的地址
4.数组在传参的时候，即使参数写成数组形式，传过去的依然是指针
void Print1(int arr[])
{
    cout<<sizeof(arr)<<endl;
}
void Print2(int* arr)
{
    cout<<sizeof(arr)<<endl;
}
int main()
{
    int arr[]={1,2,3,4,5,6,7,8,9};
    cout<<&arr[0]<<endl<<arr<<endl<<&arr<<endl;
    
    Print1(arr);
    Print2(arr);
    return 0;
}
六.使用指针访问数组
数组元素的访问在编译器处理的时候，是转换成首元素的地址+偏移量求出元素的地址，然后解引用访问的。因此 arr[i] 等价 (arr+i) 等价 i[arr]
