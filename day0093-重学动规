//1.删除并获得点数
https://leetcode.cn/problems/delete-and-earn/
class Solution {
private:
    int rob(vector<int>& sum)
    {
        int n=sum.size();
        vector<int> f(n);
        auto g=f;
        f[0]=sum[0];
        for(int i=1;i<n;i++)
        {
            f[i]=g[i-1]+sum[i];
            g[i]=max(f[i-1],g[i-1]);
        }
        return max(f[n-1],g[n-1]);
    }

public:
    int deleteAndEarn(vector<int>& nums) {
        int maxVal=0;
        for(int i=0;i<nums.size();i++)
        {
            maxVal=max(maxVal,nums[i]);
        }
        vector<int> sum(maxVal+1);
        for(int e:nums)
        {
            sum[e]+=e;
        }

        return rob(sum);
    }
};

//2.粉刷房子
https://leetcode.cn/problems/JEj789/
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n=costs.size();
        vector<vector<int>> dp(n+1,vector<int>(3));

        for(int i=1;i<=n;i++)
        {
            dp[i][0]=min(dp[i-1][1],dp[i-1][2])+costs[i-1][0];
            dp[i][1]=min(dp[i-1][0],dp[i-1][2])+costs[i-1][1];
            dp[i][2]=min(dp[i-1][1],dp[i-1][0])+costs[i-1][2];
        }
        return min(min(dp[n][0],dp[n][1]),dp[n][2]);
    }
};


//3.最佳买卖股票时机含冷冻期
https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/solutions/323509/zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()==0)
        return 0;

        int n=prices.size();
        //0表示买入，1表示冷冻，2表示可交易
        vector<vector<int>> dp(n,vector<int>(3));
        dp[0][0]=-prices[0];
        for(int i=1;i<n;i++)
        {
            dp[i][0]=max(dp[i-1][0],dp[i-1][2]-prices[i]);
            dp[i][1]=dp[i-1][0]+prices[i];
            dp[i][2]=max(dp[i-1][2],dp[i-1][1]);
        }

        return max(dp[n-1][1],dp[n-1][2]);
    }
};




//4.最佳买卖股票时机含手续费
https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        vector<int> f(n);
        auto g=f;

        f[0]=-prices[0]-fee;
        for(int i=1;i<n;i++)
        {
            f[i]=max(f[i-1],g[i-1]-prices[i]-fee);//买入
            g[i]=max(g[i-1],f[i-1]+prices[i]);//可交易
        }

        return g[n-1];
    }
};

//5.买卖股票的最佳时机III
https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/
class Solution {
public:
const int INF=0x3f3f3f3f;
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> f(n,vector<int>(3,-INF));//持股状态
        auto g=f;//不持股状态

        f[0][0]=-prices[0];
        g[0][0]=0;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<3;j++)//交易次数
            {
                f[i][j]=max(f[i-1][j],g[i-1][j]-prices[i]);
                g[i][j]=g[i-1][j];
                if(j>=1)
                {
                    g[i][j]=max(g[i-1][j],f[i-1][j-1]+prices[i]);
                }
            }
        }
        return max(max(g[n-1][0],g[n-1][1]),g[n-1][2]);
    }
};
