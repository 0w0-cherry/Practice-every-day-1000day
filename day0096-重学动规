//1.最长递增子序列
https://leetcode.cn/problems/longest-increasing-subsequence/description/
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1);
        int ret=1;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])
                {
                    dp[i]=max(dp[i],dp[j]+1);
                    ret=max(ret,dp[i]);
                }
            }
        }
        return ret;
    }
};

//摆动序列
https://leetcode.cn/problems/wiggle-subsequence/
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(2,1));
        //0表示上升，1表示下降
        int ret=1;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])
                {
                    dp[i][0]=max(dp[i][0],dp[j][1]+1);
                }
                else if(nums[j]>nums[i])
                {
                    dp[i][1]=max(dp[i][1],dp[j][0]+1);
                }
                ret=max(max(ret,dp[i][0]),dp[i][1]);
            }
        }
        return ret;
    }
};
