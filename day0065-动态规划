//数字三角形，蓝桥杯省赛
//难度：竞赛**
https://www.lanqiao.cn/paper/3837/problem/505/
#include<bits/stdc++.h>
#include<math.h>
using namespace std;
int PathPrograming()
{
	int a[5 + 1][5 + 1] = { 0 };
	a[1][1] = 7;
	a[2][1] = 3, a[2][2] = 8;
	a[3][1] = 8, a[3][2] = 1, a[3][3] = 0;
	a[4][1] = 2, a[4][2] = 7, a[4][3] = 4, a[4][4] = 4;
	a[5][1] = 4, a[5][2] = 5, a[5][3] = 2, a[5][4] = 6, a[5][5] = 5;

	int dp[6][6][6] = {0};//行i，列j，向正下方走的次数k
	dp[1][1][0] = a[1][1];
	for (int i = 2; i <= 5; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			for (int k = 0; k <= (5 - 1) / 2 + 1; k++)
			{
				if (k == 0)//向正下走次数为0
				{
					dp[i][j][k] = dp[i - 1][j - 1][k] + a[i][j];
				}
				else
				{
					dp[i][j][k] = max(dp[i - 1][j - 1][k], dp[i - 1][j][k - 1]) + a[i][j];
				}
			}

		}
	}
	int ret = 0;
	if ((5 - 1) % 2 == 1)//n-1为奇数
	{
		for (int j = 1; j <= 5; j++)
		{
			ret = max(max(dp[5][j][(5 - 1) / 2 + 1], dp[5][j][(5 - 1) / 2]), ret);
		}
	}
	else
	{
		for (int j = 1; j <= 5; j++)
		{
			ret = max(ret, dp[5][j][(5 - 1) / 2]); 
		}
	}
	return ret;
}
int main()
{
	int n;
	//n = 5;
	int ret=PathPrograming();
	cout <<ret;
	return 0;
}


//最大数组和，
//难度：中等
https://leetcode.cn/problems/maximum-subarray/
//问题：该方法时间复杂度为O（N*N），超出时间限制
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        //无法处理数组为全负数,数组最大和为0可处理
        for(int i=0;i<n;i++)
        {
            dp[i]=0;
            for(int j=0;j<=i;j++)
            {
                dp[i]=max(0,dp[i]+nums[j]);
            }
        }

        int Max=dp[0];
        for(int i=1;i<n;i++)
        {
            Max=max(Max,dp[i]);
        }
        //处理数组最大和为负数
        if(Max==0)//Max为0说明数组最大和为0或者数组为全负数，因此数组最大和为nums数组中的某个单个元素
        {
            Max=nums[0];
            for(int i=1;i<n;i++)
            {
                Max=max(Max,nums[i]);
            }
        }
        return Max;
    }
};
//优化，时间复杂度O（N）
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        dp[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            dp[i]=max(0,dp[i-1])+nums[i];
        }
        int Max=dp[0];
        for(int i=1;i<n;i++)
        {
            Max=max(Max,dp[i]);
        }
        return Max;
    }
};

https://leetcode.cn/problems/JEj789/
//粉刷房子
//难度：中等
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n=costs.size();
        vector<int> f(n+1);
        auto g=f;
        auto k=f;

        //f[0]=costs[0][0];//0号,红
        //g[0]=costs[0][1];//蓝
        //k[0]=costs[0][2];//绿
        for(int i=1;i<=n;i++)
        {
            f[i]=min(g[i-1],k[i-1])+costs[i-1][0];
            g[i]=min(f[i-1],k[i-1])+costs[i-1][1];
            k[i]=min(f[i-1],g[i-1])+costs[i-1][2];
        }
        return min(min(f[n],g[n]),k[n]);
    }
};
