#include<assert.h>
#include<iostream>
using namespace std;
//使用KV模型，更适合查找数据
template<class T>
struct AVLTreeNode
{
	AVLTreeNode(const T& data=T())
		:_left(nullptr)
		,_right(nullptr)
		,_parent(nullptr)
		,_data(data)
		,_bf(0)
	{}
	AVLTreeNode<T>* _left;
	AVLTreeNode<T>* _parent;
	AVLTreeNode<T>* _right;
	T _data;
	int _bf;
};
template<class T>
class AVLTree
{
	typedef AVLTreeNode<T> Node;
public:
	AVLTree()
		:_root(nullptr)
	{}
	bool IsAVLTree()
	{
		return _IsAVLTree(_root);
	}
	Node* Find(const T& key)
	{
		Node* cur = _root;
		while (cur)
		{
			if (key > cur->_data)
				cur = cur->_right;
			else if (key < cur->_data)
				cur = cur->_left;
			else
				return cur;

			return nullptr;
		}
	}
	bool Insert(const T& data)
	{
		//判空返回
		if (_root == nullptr)
		{
			_root = new Node(data);
			return true;
		}

		//查找插入的位置
		Node* cur = _root;
		Node* parent = nullptr;
		while (cur)
		{
			parent = cur;
			if (data > cur->_data)
				cur = cur->_right;
			else if (data < cur->_data)
				cur = cur->_left;
			else
				return false;
		}
		//插入结点
		cur = new Node(data);
		if (data > parent->_data)
			parent->_right = cur;
		else
			parent->_left = cur;
		cur->_parent = parent;
		while (parent)
		{
			if (cur == parent->_left)
				parent->_bf--;
			else
				parent->_bf++;

			if (parent->_bf == 0)
				break;
			else if (parent->_bf == 1 || parent->_bf == -1)
			{
				cur = parent;
				parent = parent->_parent;
			}
			else
			{
				if (parent->_bf == 2)
				{
					if (cur->_bf == 1)
						RotateL(parent);
					else if (cur->_bf == -1)
						RotateRL(parent);
				}
				else if (parent->_bf == -2)
				{
					if (cur->_bf == -1)
						RotateR(parent);
					else
						RotateLR(parent);
				}
				break;
			}
		}

	}
	void InOrder()
	{
		_InOrder(_root);
	}
private:
	void _InOrder(Node* root)
	{
		if (root == nullptr)
			return;
		_InOrder(root->_left);
		cout << root->_data << endl;
		_InOrder(root->_right);
	}
	bool _IsAVLTree(Node* root)
	{
		if (root == nullptr)
			return true;

		size_t left = _Height(root->_left);
		size_t right = _Height(root->_right);
		//这里是bf和左右子树的高度差不统一了，说明代码对bf的更新存在问题
		if (abs(left - right) > 1 || right - left != root->_bf)
			return false;

		return _IsAVLTree(root->_left) && _IsAVLTree(root->_right);
	}
	size_t _Height(Node* root)
	{
		if (root == nullptr)
			return 0;

		size_t LeftHeight = _Height(root->_left);
		size_t RightHeight = _Height(root->_right);

		return LeftHeight > RightHeight ? LeftHeight + 1 : RightHeight + 1;
	}
	void RotateL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;

		parent->_right = subRL;
		if (subRL)
			subRL->_parent = parent;
		subR->_left = parent;
		
		Node* ppNode = parent->_parent;
		parent->_parent = subR;
		if (parent == _root)
		{
			_root = subR;
			subR->_parent = nullptr;
		}
		else
		{
			if (parent == ppNode->_left)
				ppNode->_left = subR;
			else if (parent == ppNode->_right)
				ppNode->_right = subR;
			subR->_parent = ppNode;
		}
	}
	void RotateR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;

		parent->_left = subLR;
		if (subLR)
			subLR->_parent = parent;

		subL->_right = parent;
		Node* ppNode = parent->_parent;
		parent->_parent = subL;

		if (parent == _root)
		{
			_root = subL;
			_root->_parent = nullptr;
		}
		else
		{
			if (parent == ppNode->_left)
				ppNode->_left = subL;
			else if (parent == ppNode->_right)
				ppNode->_right = subL;
			subL->_parent = ppNode;
		}
		parent->_bf = subL->_bf = 0;
		//此处不需要更新其余的祖先结点的平衡因子是因为在插入时平衡因子最多到2或-2就停止更新平衡因子
	}
	void RotateRL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		int bf = subRL->_bf;
		RotateR(parent->_right);
		RotateL(parent);

		subRL->_bf = 0;
		if (bf == -1)
		{
			parent->_bf = 0;
			subR->_bf = 1;
		}
		else if (bf == 1)
		{
			parent->_bf = -1;
			subR->_bf = 0;
		}
		else if (bf == 0)
		{
			parent->_bf = 0;
			subR->_bf = 0;
		}
		else
		{
			assert(false);
		}
	}
	void RotateLR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		int bf = subLR->_bf;

		RotateL(parent->_left);
		RotateR(parent);

		subLR->_bf = 0;
		if (bf == 1)
		{
			parent->_bf = 0;
			subL->_bf = -1;
		}
		else if (bf == -1)
		{
			parent->_bf = 1;
			subL->_bf = 0;
		}
		else if (bf == 0)
		{
			parent->_bf = 0;
			subL->_bf = 0;
		}
		else
		{
			assert(false);
		}
	}
private:
	Node* _root;
};


void test1()
{
	int a[] = { 1,4,7,5,2,3,6 };
	AVLTree <int> p ;

	for (auto e : a)
	{
		p.Insert(e);
	}
	p.InOrder();

}
