https://leetcode.cn/problems/arithmetic-slices-ii-subsequence/description/
//等差数列划分II
//难度：困难
方法一：
算法缺陷：时间复杂度O（N^3）
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n = nums.size(); // 优化
        vector<vector<int>> dp(n,vector<int>(n));//dp[i][j]表示以i和j结尾的所有等差数列子序列的总和
        int ret=0;
        for(int j=2;j<n;j++)
        {
            for(int i=1;i<j;i++)
            {
                long long a=(long long)2*nums[i]-nums[j];
                for(int k=0;k<i;k++)
                {
                    if(nums[k]==a)
                    {
                        dp[i][j]+=dp[k][i]+1;
                    }
                }
                ret+=dp[i][j];
            }
        }
        return ret;
    }
};
方法二 优化：




https://leetcode.cn/problems/arithmetic-slices/
//等差数列划分
//难度：中等
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        int ret=0;
        for(int i=2;i<n;i++)
        {
            if(nums[i]-nums[i-1]==nums[i-1]-nums[i-2])
            {
                dp[i]=dp[i-1]+1;
            }
            ret+=dp[i];
        }
        return ret;
    }
};


https://leetcode.cn/problems/Q91FMA/description/
//最长斐波那契子序列
//难度：中等
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
        int n=arr.size();
        map<int,int> Tree;
        for(int i=0;i<n;i++)
        {
            Tree[arr[i]]=i;
        }

        int ret=2;
        vector<vector<int>> dp(n,vector<int>(n,2));//表示以当前2个位置为结尾最长的长度
        for(int j=2;j<n;j++)//固定最后一个位置
        {
            for(int i=1;i<j;i++)//固定倒数第二个位置
            {
                int a=arr[j]-arr[i];
                if(Tree.count(a) && a<arr[i])
                {
                    dp[i][j]=max(dp[i][j],dp[Tree[a]][i]+1);
                }
                ret=max(ret,dp[i][j]);
            }
        }
        return ret>2?ret:0;
    }
};
