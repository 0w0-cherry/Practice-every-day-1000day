https://leetcode.cn/problems/unique-substrings-in-wraparound-string/
class Solution {
public:
    int findSubstringInWraproundString(string s) {
        int n=s.size();
        vector<int> dp(n,1);
        dp[0]=1;
        for(int i=1;i<n;i++)
        {
            if(s[i-1]+1==s[i] || s[i-1]=='z'&&s[i]=='a')
            {
                dp[i]=dp[i-1]+1;
            }
        }
        int hash[26]={0};
        for(int i=0;i<n;i++)
        {
            hash[s[i]-'a']=max(hash[s[i]-'a'],dp[i]);
        }

        int sum=0;
        for(auto e:hash)
        {
            sum+=e;
        }
        return sum;
    }
};




https://leetcode.cn/problems/arithmetic-slices/
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        dp[0]=0;
        //dp[1]=0;
        int sum=0;
        for(int i=2;i<n;i++)
        {
            dp[i]=nums[i]-nums[i-1]==nums[i-1]-nums[i-2]?dp[i-1]+1:0;
            sum+=dp[i];
        }
        return sum;
    }
};


https://leetcode.cn/problems/longest-turbulent-subarray/
class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        int n=arr.size();
        vector<int> f(n,1),g(n,1);
        int ret=1;
        for(int i=1;i<n;i++)
        {
            if(arr[i-1]<arr[i])
            {
                f[i]=g[i-1]+1;
            }
            else if(arr[i-1]>arr[i])
            {
                g[i]=f[i-1]+1;
            }
            ret=max(max(f[i],g[i]),ret);
        }
        return ret;
    }
};


https://leetcode.cn/problems/word-break/
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> hash;
        for(auto e:wordDict)hash.insert(e);

        int n=s.size();
        vector<bool> dp(n+1);
        s=' '+s;
        dp[0]=true;
        for(int i=1;i<=n;i++)
        {
            for(int j=i;j>=1;j--)
            {
                if(dp[j-1]&& hash.count(s.substr(j,i-j+1) ))
                {
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[n];
    }
};


https://leetcode.cn/problems/maximum-absolute-sum-of-any-subarray/
class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        int Max=0,Min=0;
        int MaxSum=0,MinSum=0;
        for(auto num:nums)
        {
            MaxSum+=num;
            Max=max(Max,MaxSum);
            MaxSum=max(0,MaxSum);

            MinSum+=num;
            Min=min(Min,MinSum);
            MinSum=min(0,MinSum);
        }
        return max(Max,-Min);
    }
};
