五.位段
1.书写规则：
struct A
{
    int a:2;//占2bit位
    int b:5;//占5bit位
    int c:6;//占6bit位
};
//位段是基于结构体实现的
2.目的：节省空间
3.位段的内存分配：
（1）位段上的空间是按照需要以4字节或者1字节的方式开辟的
（2）位段可指定内存大小不能超过这个变量原先的大小（如：char类型不能为9）
（3）位段不跨平台，注重可移植的程序应避免使用
（4）当开辟了内存后，内存中每个比特位从右向左还是从左向右使用，是不确定的
（5）当前面剩余的空间不足下一个成员使用的时候，剩余的空间是否使用，是不确定的（VS选择不使用前面不足的空间，且使用单个字节的空间时，从右向左使用）
（6）
小端：先将底数据存放在低地址处
大端：先将高数据存放在低地址处
4.位段的跨平台问题
（1）int位段被当作有符号数还是无符号数是不确定的
（2）位段中最大位的数目不能确定（16位是16，32位是32，27不能在16位机器上运行）
（3）位段中的成员在内存中从左向右分配还是从右向左分配，标准尚未定义
（4）当前面剩余的空间不足下一个成员使用的时候，剩余的空间是否使用，是不确定的（VS选择不使用前面不足的空间，且使用单个字节的空间时，从右向左使用）
5.位段的应用：节省了空间，缩小传输的数据，有利于网络畅通
6.注意事项：在位段中，可能存在多个成员共用同一字节，因此不能取地址
struct A
{
    int a:2;
    int b:5;
}
struct A sa={0};
sa.b=10;
总结：
与结构体相比，位段可以达到相同的效果，并且可以节省空间。但是它不能取地址且存在跨平台问题
