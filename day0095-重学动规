//最长湍流子数组
https://leetcode.cn/problems/longest-turbulent-subarray/description/
class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        int n=arr.size();
        vector<vector<int>> dp(n,vector<int>(3,1));
        int ret=1;
        //0平稳，1上升，2下降
        for(int i=1;i<n;i++)
        {
            if(arr[i-1]<arr[i])
            {
                dp[i][1]=dp[i-1][2]+1;
            }
            else if(arr[i-1]>arr[i])
            {
                dp[i][2]=dp[i-1][1]+1;
            }
            ret=max(max(ret,dp[i][1]),dp[i][2]);
        }
        return ret;
    }
};


//单词拆分
https://leetcode.cn/problems/word-break/description/
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> hash;
        for(string& a:wordDict)
        {
            hash.insert(a);
        }

        int n=s.size();
        vector<bool> dp(n+1);
        s=' '+s;
        dp[0]=true;
        for(int i=1;i<=n;i++)
        {
            for(int j=i;j>=1;j--)
            {
                if(dp[j-1]&& hash.count(s.substr(j,i-j+1)) )
                {
                    dp[i]=true;
                }
            }
        }
        return dp[n];
    }
};


//环绕字符串中的唯一子字符串
https://leetcode.cn/problems/word-break/
class Solution {
public:
    int findSubstringInWraproundString(string s) {
        int n=s.size();
        vector<int> dp(n,1);//存储以i为结尾的所有字串中，有多少个在base中出现过
        for(int i=1;i<n;i++)
        {
            if(s[i-1]+1==s[i] || s[i-1]=='z'&&s[i]=='a')
            {
                dp[i]+=dp[i-1];
            }
        }

        int hash[26]={0};//存储分别以a-z为结尾的子串在base中出现过的最大次数
        for(int i=0;i<n;i++)
        {
            hash[s[i]-'a']=max(hash[s[i]-'a'],dp[i]);
        }
        int sum=0;
        for(int i=0;i<26;i++)
        {
            sum+=hash[i];
        }
        return sum;
    }
};

//等差数列划分
https://leetcode.cn/problems/arithmetic-slices/
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        int ret=0;
        for(int i=2;i<n;i++)
        {
            if(nums[i-1]-nums[i-2]==nums[i]-nums[i-1])
            {
                dp[i]=dp[i-1]+1;
            }
            ret+=dp[i];
        }
        return ret;
    }
};
