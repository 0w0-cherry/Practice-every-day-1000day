//分割等和子集
https://leetcode.cn/problems/partition-equal-subset-sum/description/
//未优化
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(sum%2==1)
        return 0;
        vector<vector<bool>> dp(n+1,vector<bool>(sum/2+1));
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=1;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum/2;j++)
            {
                dp[i][j]=dp[i-1][j];
                if(j-nums[i-1]>=0)
                    dp[i][j]=max(dp[i][j],dp[i-1][j-nums[i-1]]);
    
            }
        }
        return dp[n][sum/2];
    }
};

//优化
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(sum%2==1) return 0;
        //优化
        vector<bool> dp(sum/2+1);
        dp[0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=sum/2;j>=nums[i-1];j--)
            {
                dp[j]=max(dp[j],dp[j-nums[i-1]]);
    
            }
        }
        return dp[sum/2];
    }
};

//目标和
https://leetcode.cn/problems/YaVDxD/
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(auto s:nums) sum+=s;
        int a=(sum+target)/2;
        if((sum+target)%2==1 || a<0) return 0;

        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(a+1));//dp[i][j]表示从前i个数中选择总和等于j的不同选法的和
        dp[0][0]=1;//由于数字可能为0，因此需要计算。所以利用特性，第一列后续不初始化
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=a;j++)
            {
                dp[i][j]=dp[i-1][j];
                if(j-nums[i-1]>=0)
                {
                    dp[i][j]+=dp[i-1][j-nums[i-1]];
                }
            }
        }
        return dp[n][a];
    }
};
